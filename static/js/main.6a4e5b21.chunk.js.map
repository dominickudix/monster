{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","monster","id","alt","name","email","CardList","monsters","map","key","App","e","setState","searchField","target","value","state","date","Date","fetch","then","response","json","users","setInterval","clearInterval","this","filteredMonsters","filter","toLowerCase","includes","toLocaleTimeString","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAGaA,G,YAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aACnC,OACI,2BAAOC,UAAW,SAASC,KAAO,SAASH,YAAeA,EAAaI,SAAYH,MCF9EI,G,YAAO,SAACC,GACjB,OACI,yBAAKJ,UAAW,kBAChB,yBAAKK,IAAG,+BAA4BD,EAAME,QAAQC,GAA1C,0BAAsEC,IAAOJ,EAAME,QAAQG,OACnG,4BAAKL,EAAME,QAAQG,MACnB,2BAAIL,EAAME,QAAQI,UCJbC,EAAW,SAACP,GACzB,OACI,yBAAKJ,UAAY,aAChBI,EAAMQ,SAASC,KAAI,SAAAP,GAAO,OAAI,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,SC6CpDS,E,YA5Cb,aAAc,IAAD,8BACf,+CAuBAhB,aAAgB,SAACiB,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAvBvC,EAAKC,MAAQ,CACXT,SAAS,GACTM,YAAa,GACbI,KAAM,IAAIC,MALG,E,iFAWO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACL,SAAUgB,OACxCC,aAAY,kBAAM,EAAKZ,SAAS,CAACK,KAAK,IAAIC,SAAU,O,6CAIxDO,cAAcC,KAAKT,Q,+BAUT,IAAD,EACyBS,KAAKV,MAA7BT,EADD,EACCA,SAASM,EADV,EACUA,YACVc,EAAmBpB,EAASqB,QAAO,SAAC3B,GAAD,OAAWA,EAAQG,KAAKyB,cAAcC,SAASjB,EAAYgB,kBAErG,OACE,yBAAKlC,UAAU,OACb,uBAAGA,UAAY,SAAS+B,KAAKV,MAAMC,KAAKc,sBAC1C,wBAAIpC,UAAY,SAAhB,oBACA,kBAAC,EAAD,CAAWD,aAAegC,KAAKhC,aAAeD,YAAY,wBAC1D,kBAAC,EAAD,CAAUc,SAAWoB,S,GAvCPK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.6a4e5b21.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder,handleChange}) => {\n    return (\n        <input className ='search' type = 'search' placeholder = {placeholder} onChange = {handleChange}/>\n        \n    )\n}","import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) =>{\n    return (\n        <div className ='card-container'>\n        <img src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt = {props.monster.name}></img>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react';\nimport'./card-list.styles.css'\nimport {Card} from '../card/card.component';\n\nexport const CardList = (props)  => {\nreturn (\n    <div className = 'card-list'>\n    {props.monsters.map(monster => <Card key={monster.id} monster={monster}></Card>)}\n    </div>\n)\n};","import React, { Component } from 'react';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport {CardList} from './components/card-list/card-list.component';\n\n\n\nclass App extends Component{\n  constructor(){\nsuper();\nthis.state = {\n  monsters:[],\n  searchField: '',\n  date: new Date()\n}\n  }\n\n\n//lifecycle methods\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n    setInterval(() => this.setState({date:new Date()}), 1000);\n  }\n\n  componentWillUnmount(){\nclearInterval(this.date);\n  }\n\n\n  //A good rule of thumb is this: Use arrow functions on any class methods you define and aren't part of React (i.e. render(), componentDidMount()\nhandleChange  = (e) => {\n   this.setState({searchField:e.target.value}); //lexical scoping , get binded automatically to the scope\n}\n\n\n render(){\n   const {monsters,searchField} = this.state;//destructure  the elements in the state for use in the render.\n   const filteredMonsters = monsters.filter((monster)=>monster.name.toLowerCase().includes(searchField.toLowerCase()));//returns a new updated array\n\n  return (\n    <div className=\"App\">\n      <p className = 'timer'>{this.state.date.toLocaleTimeString()}</p>\n    <h1 className = 'title'>Monsters Rolodex</h1>\n    <SearchBox handleChange ={this.handleChange}  placeholder='search for monsters'/>\n    <CardList monsters ={filteredMonsters}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}